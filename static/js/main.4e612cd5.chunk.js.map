{"version":3,"sources":["libs/boardgame.io/connection.js","libs/boardgame.io/login-form.js","libs/boardgame.io/room-instance.js","libs/boardgame.io/create-room-form.js","libs/boardgame.io/react.js","Board.js","StyledRoom.js","StyledLobby.js","App.js","serviceWorker.js","index.js"],"names":["_LobbyConnectionImpl","_ref","server","gameComponents","playerName","playerCredentials","Object","classCallCheck","this","gameInstances","concat","length","fetch","_baseUrl","resp","status","Error","json","gameName","_getGameComponents","gameResp","gameJson","_iterator2","Symbol","iterator","_iteratorNormalCompletion2","_step2","next","done","value","_context","t2","gameID","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","undefined","_step3","_iterator3","inst","err","return","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","comp","game","name","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","players","some","player","playerID","_findPlayer","_getGameInstance","method","body","JSON","stringify","headers","Content-Type","Number","parseInt","_context2","t0","id","_context3","t1","leave","numPlayers","minPlayers","maxPlayers","_context5","LobbyLoginForm","state","_this","props","nameErrorMsg","onClickEnter","onEnter","onKeyPress","event","key","onChangePlayerName","target","trim","setState","react_default","a","createElement","className","type","onChange","onClick","React","Component","defaultProps","LobbyRoomInstance","_createSeat","_createInstanceButtons","playerSeat","find","freeSeat","onClickLeave","onClickJoin","onClickPlay","gameInstance","map","join","LobbyCreateRoomForm","selectedGame","_createGameNameOption","idx","_createNumPlayersOption","_createNumPlayersRange","console","assert","toConsumableArray","Array","keys","slice","onChangeNumPlayers","onChangeSelectedGame","games","onClickCreate","createGame","_this2","evt","PHASES","ENTER","PLAY","LIST","Lobby","possibleConstructorReturn","getPrototypeOf","call","phase","runningGame","errorMsg","credentialStore","_createConnection","opts","connection","lobbyServer","_updateCredentials","credentials","prevState","store","assign","_updateConnection","asyncToGenerator","regenerator_default","mark","_callee","wrap","prev","refresh","forceUpdate","stop","_enterLobby","_exitLobby","_callee2","disconnect","_createRoom","_ref3","_callee3","create","message","_x","_x2","apply","arguments","_joinRoom","_ref4","_callee4","_context4","_x3","_x4","_x5","_leaveRoom","_ref5","_callee5","_x6","_x7","_startGame","gameOpts","gameCode","multiplayer","gameServer","app","clientFactory","board","debug","_exitRoom","_getPhaseVisibility","renderRooms","room_instance","values","cookie","Cookies","load","prevProps","creds","save","path","_this$props","renderer","_this$state","handleEnterLobby","handleExitLobby","handleCreateRoom","handleJoinRoom","handleLeaveRoom","handleExitRoom","handleStartGame","style","padding","login_form","create_room_form","Client","Board","isActive","moves","clickCell","events","endTurn","G","cells","winner","ctx","gameover","cellStyle","border","width","height","lineHeight","textAlign","tbody","i","_loop","j","push","findPlayerSeat","findFreeSeat","StyledRoom","handleJoinClick","roomId","onJoin","handleLeaveClick","onLeave","handlePlayClick","_this$props2","onPlay","handleSpectateClick","_this$props3","onSpectate","_this$props4","paddingRight","selectGameName","StyledLobby","handlePlayerNameChange","changingPlayerName","handleEnterClick","onEnterLobby","handleExitClick","onExitLobby","handleCreateRoomClick","onCreateRoom","handleJoinRoomClick","gameId","playerId","onJoinRoom","handleLeaveRoomClick","onLeaveRoom","onStartGame","handleExitRoomClick","onExitRoom","color","src_StyledRoom","Game","App","libs_boardgame_io_react","process","src_StyledLobby","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAQMA,aACJ,SAAAA,EAAAC,GAAuE,IAAzDC,EAAyDD,EAAzDC,OAAQC,EAAiDF,EAAjDE,eAAgBC,EAAiCH,EAAjCG,WAAYC,EAAqBJ,EAArBI,kBAAqBC,OAAAC,EAAA,EAAAD,CAAAE,KAAAR,GACrEQ,KAAKL,eAAiBA,EACtBK,KAAKJ,WAAaA,GAAc,UAChCI,KAAKH,kBAAoBA,EACzBG,KAAKN,OAASA,EACdM,KAAKC,cAAgB,0DAIrB,SAAAC,OAAUF,KAAKN,QAAU,GAAzB,sMAKEM,KAAKC,cAAcE,OAAS,WACTC,MAAMJ,KAAKK,sBACV,OADdC,UACGC,6BACD,IAAIC,MAAM,eAAiBF,EAAKC,+BAErBD,EAAKG,cAAlBA,wCACeA,wEAAZC,UACFV,KAAKW,mBAAmBD,4EACNN,MAAMJ,KAAKK,WAAa,IAAMK,kBAA/CE,mBACiBA,EAASH,eAChC,IADMI,sCACNC,EAAiBD,EAASZ,cAA1Bc,OAAAC,cAAAC,GAAAC,EAAAJ,EAAAK,QAAAC,MAAAH,GAAA,EAAyCC,EAAAG,MAClCX,SAAWA,4OAElBV,KAAKC,cAAgBD,KAAKC,cAAcC,OAAOW,EAASZ,sVAGpD,IAAIO,MAAM,qCAAAc,EAAAC,GAA+C,8MAIlDC,GAAQ,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACvB,QAAAC,EAAAC,EAAiB9B,KAAKC,cAAtBc,OAAAC,cAAAS,GAAAI,EAAAC,EAAAX,QAAAC,MAAAK,GAAA,EAAqC,KAA5BM,EAA4BF,EAAAR,MACnC,GAAIU,EAAI,SAAeP,EAAQ,OAAOO,GAFjB,MAAAC,GAAAN,GAAA,EAAAC,EAAAK,EAAA,YAAAP,GAAA,MAAAK,EAAAG,QAAAH,EAAAG,SAAA,WAAAP,EAAA,MAAAC,+CAMNjB,GAAU,IAAAwB,GAAA,EAAAC,GAAA,EAAAC,OAAAR,EAAA,IAC3B,QAAAS,EAAAC,EAAiBtC,KAAKL,eAAtBoB,OAAAC,cAAAkB,GAAAG,EAAAC,EAAAnB,QAAAC,MAAAc,GAAA,EAAsC,KAA7BK,EAA6BF,EAAAhB,MACpC,GAAIkB,EAAKC,KAAKC,OAAS/B,EAAU,OAAO6B,GAFf,MAAAP,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,wCAMjBxC,GAAY,IAAA8C,GAAA,EAAAC,GAAA,EAAAC,OAAAhB,EAAA,IACtB,QAAAiB,EAAAC,EAAiB9C,KAAKC,cAAtBc,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA3B,QAAAC,MAAAsB,GAAA,EAAqC,KAA5BX,EAA4Bc,EAAAxB,MACnC,GAAIU,EAAKgB,QAAQC,KAAK,SAAAC,GAAM,OAAIA,EAAOR,OAAS7C,IAAa,OAAOmC,GAFhD,MAAAC,GAAAW,GAAA,EAAAC,EAAAZ,EAAA,YAAAU,GAAA,MAAAI,EAAAb,QAAAa,EAAAb,SAAA,WAAAU,EAAA,MAAAC,yEAMblC,EAAUc,EAAQ0B,2FAErBnB,EAAO/B,KAAKmD,YAAYnD,KAAKJ,mCAEzB,IAAIY,MAAM,6BAA+BuB,EAAKP,kBAEtDO,EAAO/B,KAAKoD,iBAAiB5B,yBAErB,IAAIhB,MAAM,iBAAmBgB,EAAS,qCAE3BpB,MACjBJ,KAAKK,WAAa,IAAMK,EAAW,IAAMc,EAAS,QAClD,CACE6B,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBN,SAAUA,EACVtD,WAAYI,KAAKJ,aAEnB6D,QAAS,CAAEC,eAAgB,gCAGX,OAXdpD,UAWGC,8BAAsB,IAAIC,MAAM,eAAiBF,EAAKC,iCAC5CD,EAAKG,eAAlBA,SACNsB,EAAKgB,QAAQY,OAAOC,SAASV,IAAWT,KAAOzC,KAAKJ,WACpDI,KAAKH,kBAAoBY,EAAKZ,0EAExB,IAAIW,MAAM,uBAAyBgB,EAAS,KAAlCqC,EAAAC,GAAiD,4LAIzDpD,EAAUc,mGAEdO,EAAO/B,KAAKoD,iBAAiB5B,yBAChB,IAAIhB,MAAM,gEACRuB,EAAKgB,8EAAfE,WACIR,OAASzC,KAAKJ,6CACJQ,MACjBJ,KAAKK,WAAa,IAAMK,EAAW,IAAMc,EAAS,SAClD,CACE6B,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBN,SAAUD,EAAOc,GACjBlE,kBAAmBG,KAAKH,oBAE1B4D,QAAS,CAAEC,eAAgB,iCAGX,OAXdpD,UAWGC,8BACD,IAAIC,MAAM,eAAiBF,EAAKC,8BAEjC0C,EAAOR,YACPzC,KAAKH,wTAIV,IAAIW,MAAM,oEAEV,IAAIA,MAAM,wBAA0BgB,EAAS,KAAnCwC,EAAAC,GAAkD,qSAKhElC,EAAO/B,KAAKmD,YAAYnD,KAAKJ,6CAEzBI,KAAKkE,MAAMnC,EAAKrB,SAAUqB,EAAKP,eAEvCxB,KAAKC,cAAgB,GACrBD,KAAKJ,WAAa,mLAGPc,EAAUyD,uFAEb5B,EAAOvC,KAAKW,mBAAmBD,yBACpB,IAAIF,MAAM,8BAEzB2D,EAAa5B,EAAKC,KAAK4B,YACvBD,EAAa5B,EAAKC,KAAK6B,kCAEjB,IAAI7D,MAAM,6BAA+B2D,0BAC9B/D,MAAMJ,KAAKK,WAAa,IAAMK,EAAW,UAAW,CACrE2C,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBW,WAAYA,IAEdV,QAAS,CAAEC,eAAgB,gCAET,OAPdpD,UAOGC,8BAAsB,IAAIC,MAAM,eAAiBF,EAAKC,wEAEzD,IAAIC,MACR,6BAA+BE,EAAW,KAA1C4D,EAAAR,GAAyD,iIC3I3DS,6MASJC,MAAQ,CACN5E,WAAY6E,EAAKC,MAAM9E,WACvB+E,aAAc,MA2BhBC,aAAe,WACiB,KAA1BH,EAAKD,MAAM5E,YACf6E,EAAKC,MAAMG,QAAQJ,EAAKD,MAAM5E,eAGhCkF,WAAa,SAAAC,GACO,UAAdA,EAAMC,KACRP,EAAKG,kBAITK,mBAAqB,SAAAF,GACnB,IAAMtC,EAAOsC,EAAMG,OAAO7D,MAAM8D,OAChCV,EAAKW,SAAS,CACZxF,WAAY6C,EACZkC,aAAclC,EAAKtC,OAAS,EAAI,GAAK,+FAtCvC,OACEkF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,yBACAH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLpE,MAAOrB,KAAKwE,MAAM5E,WAClB8F,SAAU1F,KAAKiF,mBACfH,WAAY9E,KAAK8E,aAEnBO,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUG,QAAS3F,KAAK4E,cAA1C,UAIFS,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACbxF,KAAKwE,MAAMG,aACZU,EAAAC,EAAAC,cAAA,oBAhCmBK,IAAMC,WAA7BtB,EAKGuB,aAAe,CACpBlG,WAAY,IAoDD2E,QCuCAwB,6MApFbC,YAAc,SAAA/C,GACZ,OAAOA,EAAOR,MAAQ,YAGxBwD,uBAAyB,SAAAlE,GACvB,IAAMmE,EAAanE,EAAKgB,QAAQoD,KAC9B,SAAAlD,GAAM,OAAIA,EAAOR,OAASgC,EAAKC,MAAM9E,aAEjCwG,EAAWrE,EAAKgB,QAAQoD,KAAK,SAAAlD,GAAM,OAAKA,EAAOR,OACrD,OAAIyD,GAAcE,EAGdf,EAAAC,EAAAC,cAAA,UACEI,QAAS,kBAAMlB,EAAKC,MAAM2B,aAAatE,EAAKrB,SAAUqB,EAAKP,UAD7D,SAOA4E,EAGAf,EAAAC,EAAAC,cAAA,UACEI,QAAS,kBACPlB,EAAKC,MAAM4B,YAAYvE,EAAKrB,SAAUqB,EAAKP,OAAQ,GAAK4E,EAASrC,MAFrE,QAUAmC,EAEAb,EAAAC,EAAAC,cAAA,UACEI,QAAS,kBACPlB,EAAKC,MAAM6B,YAAYxE,EAAKrB,SAAU,CACpCc,OAAQO,EAAKP,OACb0B,SAAU,GAAKgD,EAAWnC,GAC1BI,WAAYpC,EAAKgB,QAAQ5C,WAL/B,QAeFkF,EAAAC,EAAAC,cAAA,UACEI,QAAS,kBACPlB,EAAKC,MAAM6B,YAAYxE,EAAKrB,SAAU,CACpCc,OAAQO,EAAKP,OACb2C,WAAYpC,EAAKgB,QAAQ5C,WAJ/B,qFAcF,IAAM4B,EAAO/B,KAAK0E,MAAM8B,aACpBjG,EAAS,OAIb,OAHKwB,EAAKgB,QAAQoD,KAAK,SAAAlD,GAAM,OAAKA,EAAOR,SACvClC,EAAS,WAGT8E,EAAAC,EAAAC,cAAA,MAAIP,IAAK,QAAUjD,EAAKP,QACtB6D,EAAAC,EAAAC,cAAA,MAAIP,IAAK,aAAejD,EAAKP,QAASO,EAAKrB,UAC3C2E,EAAAC,EAAAC,cAAA,MAAIP,IAAK,eAAiBjD,EAAKP,QAASjB,GACxC8E,EAAAC,EAAAC,cAAA,MAAIP,IAAK,cAAgBjD,EAAKP,QAC3BO,EAAKgB,QAAQ0D,IAAIzG,KAAKgG,aAAaU,KAAK,OAE3CrB,EAAAC,EAAAC,cAAA,MAAIP,IAAK,gBAAkBjD,EAAKP,QAE7BxB,KAAKiG,uBAAuBlE,YA1FP6D,IAAMC,mBCqFvBc,6MA/EbnC,MAAQ,CACNoC,aAAc,EACdzC,WAAY,KAGd0C,sBAAwB,SAACrE,EAAMsE,GAC7B,OACEzB,EAAAC,EAAAC,cAAA,UAAQP,IAAK,eAAiB8B,EAAKzF,MAAOyF,GACvCtE,EAAKA,KAAKC,SAKjBsE,wBAA0B,SAAAD,GACxB,OACEzB,EAAAC,EAAAC,cAAA,UAAQP,IAAK,cAAgB8B,EAAKzF,MAAOyF,GACtCA,MAKPE,uBAAyB,SAAAxE,GAQvB,OAPKA,EAAK4B,aACR5B,EAAK4B,WAAa,GAEf5B,EAAK6B,aACR7B,EAAK6B,WAAa,GAEpB4C,QAAQC,OAAO1E,EAAK6B,YAAc7B,EAAK4B,YAChCtE,OAAAqH,EAAA,EAAArH,CAAI,IAAIsH,MAAM5E,EAAK6B,WAAa,GAAGgD,QAAQC,MAAM9E,EAAK4B,eA4B/DmD,mBAAqB,SAAAxC,GACnBN,EAAKW,SAAS,CACZjB,WAAYR,OAAOC,SAASmB,EAAMG,OAAO7D,YAI7CmG,qBAAuB,SAAAzC,GACrB,IAAI+B,EAAMnD,OAAOC,SAASmB,EAAMG,OAAO7D,OACvCoD,EAAKW,SAAS,CACZwB,aAAcE,EACd3C,WAAYM,EAAKuC,uBAAuBvC,EAAKC,MAAM+C,MAAMX,GAAKtE,MAAM,QAIxEkF,cAAgB,WACdjD,EAAKC,MAAMiD,WACTlD,EAAKC,MAAM+C,MAAMhD,EAAKD,MAAMoC,cAAcpE,KAAKC,KAC/CgC,EAAKD,MAAML,qFA1CN,IAAAyD,EAAA5H,KACP,OACEqF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACElE,MAAOrB,KAAKwE,MAAMoC,aAClBlB,SAAU,SAAAmC,GAAG,OAAID,EAAKJ,qBAAqBK,KAE1C7H,KAAK0E,MAAM+C,MAAMhB,IAAIzG,KAAK6G,wBAE7BxB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UACElE,MAAOrB,KAAKwE,MAAML,WAClBuB,SAAU1F,KAAKuH,oBAEdvH,KAAKgH,uBACJhH,KAAK0E,MAAM+C,MAAMzH,KAAKwE,MAAMoC,cAAcpE,MAC1CiE,IAAIzG,KAAK+G,0BAEb1B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACdH,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAK0H,eAAtB,mBAzDwB9B,IAAMC,WCM3BiC,EAAS,CACpBC,MAAO,QACPC,KAAM,OACNC,KAAM,QAyBFC,cAsBJ,SAAAA,EAAYxD,GAAO,IAAAD,EAAA,OAAA3E,OAAAC,EAAA,EAAAD,CAAAE,KAAAkI,IACjBzD,EAAA3E,OAAAqI,EAAA,EAAArI,CAAAE,KAAAF,OAAAsI,EAAA,EAAAtI,CAAAoI,GAAAG,KAAArI,KAAM0E,KATRF,MAAQ,CACN8D,MAAOR,EAAOC,MACdnI,WAAY,UACZ2I,YAAa,KACbC,SAAU,GACVC,gBAAiB,IAGAhE,EAqCnBiE,kBAAoB,SAAAhE,GAClB,IJgE4BiE,EIhEtBlG,EAAOgC,EAAKD,MAAM5E,WACxB6E,EAAKmE,YJ+DuBD,EI/DM,CAChCjJ,OAAQgF,EAAMmE,YACdlJ,eAAgB+E,EAAM/E,eACtBC,WAAY6C,EACZ5C,kBAAmB4E,EAAKD,MAAMiE,gBAAgBhG,IJ4D3C,IAAIjD,EAAqBmJ,KIvGblE,EA+CnBqE,mBAAqB,SAAClJ,EAAYmJ,GAChCtE,EAAKW,SAAS,SAAA4D,GAEZ,IAAMC,EAAQnJ,OAAOoJ,OAAO,GAAIF,EAAUP,iBAE1C,OADAQ,EAAM,CAACrJ,IAAemJ,EACf,CAAEN,gBAAiBQ,MApDXxE,EAwDnB0E,kBAxDmBrJ,OAAAsJ,EAAA,EAAAtJ,CAAAuJ,EAAA/D,EAAAgE,KAwDC,SAAAC,IAAA,OAAAF,EAAA/D,EAAAkE,KAAA,SAAAlI,GAAA,cAAAA,EAAAmI,KAAAnI,EAAAH,MAAA,cAAAG,EAAAH,KAAA,EACZsD,EAAKmE,WAAWc,UADJ,OAElBjF,EAAKkF,cAFa,wBAAArI,EAAAsI,SAAAL,EAAAvJ,SAxDDyE,EA6DnBoF,YAAc,SAAAjK,GACZ6E,EAAKW,SAAS,CAAExF,aAAY0I,MAAOR,EAAOG,QA9DzBxD,EAiEnBqF,WAjEmBhK,OAAAsJ,EAAA,EAAAtJ,CAAAuJ,EAAA/D,EAAAgE,KAiEN,SAAAS,IAAA,OAAAV,EAAA/D,EAAAkE,KAAA,SAAA3F,GAAA,cAAAA,EAAA4F,KAAA5F,EAAA1C,MAAA,cAAA0C,EAAA1C,KAAA,EACLsD,EAAKmE,WAAWoB,aADX,OAEXvF,EAAKW,SAAS,CAAEkD,MAAOR,EAAOC,MAAOS,SAAU,KAFpC,wBAAA3E,EAAA+F,SAAAG,EAAA/J,SAjEMyE,EAsEnBwF,YAtEmB,eAAAC,EAAApK,OAAAsJ,EAAA,EAAAtJ,CAAAuJ,EAAA/D,EAAAgE,KAsEL,SAAAa,EAAOzJ,EAAUyD,GAAjB,OAAAkF,EAAA/D,EAAAkE,KAAA,SAAAxF,GAAA,cAAAA,EAAAyF,KAAAzF,EAAA7C,MAAA,cAAA6C,EAAAyF,KAAA,EAAAzF,EAAA7C,KAAA,EAEJsD,EAAKmE,WAAWwB,OAAO1J,EAAUyD,GAF7B,cAAAH,EAAA7C,KAAA,EAGJsD,EAAKmE,WAAWc,UAHZ,OAKVjF,EAAKW,SAAS,IALJpB,EAAA7C,KAAA,gBAAA6C,EAAAyF,KAAA,EAAAzF,EAAAF,GAAAE,EAAA,SAOVS,EAAKW,SAAS,CAAEoD,SAAUxE,EAAAF,GAAMuG,UAPtB,yBAAArG,EAAA4F,SAAAO,EAAAnK,KAAA,YAtEK,gBAAAsK,EAAAC,GAAA,OAAAL,EAAAM,MAAAxK,KAAAyK,YAAA,GAAAhG,EAiFnBiG,UAjFmB,eAAAC,EAAA7K,OAAAsJ,EAAA,EAAAtJ,CAAAuJ,EAAA/D,EAAAgE,KAiFP,SAAAsB,EAAOlK,EAAUc,EAAQ0B,GAAzB,OAAAmG,EAAA/D,EAAAkE,KAAA,SAAAqB,GAAA,cAAAA,EAAApB,KAAAoB,EAAA1J,MAAA,cAAA0J,EAAApB,KAAA,EAAAoB,EAAA1J,KAAA,EAEFsD,EAAKmE,WAAWlC,KAAKhG,EAAUc,EAAQ0B,GAFrC,cAAA2H,EAAA1J,KAAA,EAGFsD,EAAKmE,WAAWc,UAHd,OAIRjF,EAAKqE,mBACHrE,EAAKmE,WAAWhJ,WAChB6E,EAAKmE,WAAW/I,mBANVgL,EAAA1J,KAAA,gBAAA0J,EAAApB,KAAA,EAAAoB,EAAA/G,GAAA+G,EAAA,SASRpG,EAAKW,SAAS,CAAEoD,SAAUqC,EAAA/G,GAAMuG,UATxB,yBAAAQ,EAAAjB,SAAAgB,EAAA5K,KAAA,YAjFO,gBAAA8K,EAAAC,EAAAC,GAAA,OAAAL,EAAAH,MAAAxK,KAAAyK,YAAA,GAAAhG,EA8FnBwG,WA9FmB,eAAAC,EAAApL,OAAAsJ,EAAA,EAAAtJ,CAAAuJ,EAAA/D,EAAAgE,KA8FN,SAAA6B,EAAOzK,EAAUc,GAAjB,OAAA6H,EAAA/D,EAAAkE,KAAA,SAAAlF,GAAA,cAAAA,EAAAmF,KAAAnF,EAAAnD,MAAA,cAAAmD,EAAAmF,KAAA,EAAAnF,EAAAnD,KAAA,EAEHsD,EAAKmE,WAAW1E,MAAMxD,EAAUc,GAF7B,cAAA8C,EAAAnD,KAAA,EAGHsD,EAAKmE,WAAWc,UAHb,OAITjF,EAAKqE,mBACHrE,EAAKmE,WAAWhJ,WAChB6E,EAAKmE,WAAW/I,mBANTyE,EAAAnD,KAAA,gBAAAmD,EAAAmF,KAAA,EAAAnF,EAAAR,GAAAQ,EAAA,SASTG,EAAKW,SAAS,CAAEoD,SAAUlE,EAAAR,GAAMuG,UATvB,yBAAA/F,EAAAsF,SAAAuB,EAAAnL,KAAA,YA9FM,gBAAAoL,EAAAC,GAAA,OAAAH,EAAAV,MAAAxK,KAAAyK,YAAA,GAAAhG,EA2GnB6G,WAAa,SAAC5K,EAAU6K,GACtB,IAAMC,EAAW/G,EAAKmE,WAAWjI,mBAAmBD,GACpD,GAAK8K,EAAL,CAOA,IAAIC,EAAc,KACdF,EAASpH,WAAa,IAEtBsH,GADEhH,EAAKC,MAAMgH,YACC,CAAEhM,OAAQ+E,EAAKC,MAAMgH,aAMvC,IAOMlJ,EAAO,CACXmJ,IARUlH,EAAKC,MAAMkH,cAAc,CACnCpJ,KAAMgJ,EAAShJ,KACfqJ,MAAOL,EAASK,MAChBC,MAAOrH,EAAKC,MAAMoH,MAClBL,gBAKAjK,OAAQ+J,EAAS/J,OACjB0B,SAAUqI,EAASpH,WAAa,EAAIoH,EAASrI,SAAW,KACxD6F,YAAatE,EAAKmE,WAAW/I,mBAG/B4E,EAAKW,SAAS,CAAEkD,MAAOR,EAAOE,KAAMO,YAAa/F,SA7B/CiC,EAAKW,SAAS,CACZoD,SAAU,QAAU9H,EAAW,oBA/GlB+D,EA8InBsH,UAAY,WACVtH,EAAKW,SAAS,CAAEkD,MAAOR,EAAOG,KAAMM,YAAa,QA/IhC9D,EAkJnBuH,oBAAsB,SAAA1D,GACpB,OAAO7D,EAAKD,MAAM8D,QAAUA,EAAQ,SAAW,SAnJ9B7D,EAsJnBwH,YAAc,SAAChM,EAAeL,GAC5B,OAAOK,EAAcwG,IAAI,SAAAD,GAAgB,IAC/BhF,EAA8BgF,EAA9BhF,OAAQd,EAAsB8F,EAAtB9F,SAAUqC,EAAYyD,EAAZzD,QAC1B,OACEsC,EAAAC,EAAAC,cAAC2G,EAAD,CACElH,IAAK,YAAcxD,EACnBgF,aAAc,CAAEhF,SAAQd,WAAUqC,QAASjD,OAAOqM,OAAOpJ,IACzDnD,WAAYA,EACZ0G,YAAa7B,EAAKiG,UAClBrE,aAAc5B,EAAKwG,WACnB1E,YAAa9B,EAAK6G,gBA9JxB7G,EAAKiE,kBAAkBjE,EAAKC,OAC5BD,EAAK0E,oBAHY1E,mFAOjB,IAAI2H,EAASC,IAAQC,KAAK,eAAiB,GACvCF,EAAO9D,OAAS8D,EAAO9D,QAAUR,EAAOE,OAC1CoE,EAAO9D,MAAQR,EAAOG,MAExBjI,KAAKoF,SAAS,CACZkD,MAAO8D,EAAO9D,OAASR,EAAOC,MAC9BnI,WAAYwM,EAAOxM,YAAc,UACjC6I,gBAAiB2D,EAAO3D,iBAAmB,gDAI5B8D,EAAWvD,GAC5B,IAAIvG,EAAOzC,KAAKwE,MAAM5E,WAClB4M,EAAQxM,KAAKwE,MAAMiE,gBAAgBhG,GACvC,GACEuG,EAAUV,QAAUtI,KAAKwE,MAAM8D,OAC/BU,EAAUP,gBAAgBhG,KAAU+J,GACpCxD,EAAUpJ,aAAe6C,EACzB,CACAzC,KAAK0I,kBAAkB1I,KAAK0E,OAC5B1E,KAAKmJ,oBACL,IAAIiD,EAAS,CACX9D,MAAOtI,KAAKwE,MAAM8D,MAClB1I,WAAY6C,EACZgG,gBAAiBzI,KAAKwE,MAAMiE,iBAE9B4D,IAAQI,KAAK,aAAcL,EAAQ,CAAEM,KAAM,wCAqItC,IAAAC,EAC8B3M,KAAK0E,MAAlC/E,EADDgN,EACChN,eAAgBiN,EADjBD,EACiBC,SADjBC,EAE8C7M,KAAKwE,MAAlDgE,EAFDqE,EAECrE,SAAU5I,EAFXiN,EAEWjN,WAAY0I,EAFvBuE,EAEuBvE,MAAOC,EAF9BsE,EAE8BtE,YAErC,OAAIqE,EACKA,EAAS,CACdpE,WACA7I,iBACAM,cAAeD,KAAK4I,WAAW3I,cAC/BqI,QACA1I,aACA2I,cACAuE,iBAAkB9M,KAAK6J,YACvBkD,gBAAiB/M,KAAK8J,WACtBkD,iBAAkBhN,KAAKiK,YACvBgD,eAAgBjN,KAAK0K,UACrBwC,gBAAiBlN,KAAKiL,WACtBkC,eAAgBnN,KAAK+L,UACrBqB,gBAAiBpN,KAAKsL,aAKxBjG,EAAAC,EAAAC,cAAA,OAAKxB,GAAG,aAAasJ,MAAO,CAAEC,QAAS,KACrCjI,EAAAC,EAAAC,cAAA,OAAKC,UAAWxF,KAAKgM,oBAAoBlE,EAAOC,QAC9C1C,EAAAC,EAAAC,cAACgI,EAAD,CACEvI,IAAKpF,EACLA,WAAYA,EACZiF,QAAS7E,KAAK6J,eAIlBxE,EAAAC,EAAAC,cAAA,OAAKC,UAAWxF,KAAKgM,oBAAoBlE,EAAOG,OAC9C5C,EAAAC,EAAAC,cAAA,qBAAa3F,GAEbyF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAczB,GAAG,iBAC9BsB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACiI,EAAD,CACE/F,MAAO9H,EACPgI,WAAY3H,KAAKiK,eAGrB5E,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,gBACAH,EAAAC,EAAAC,cAAA,OAAKxB,GAAG,aACNsB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACGvF,KAAKiM,YAAYjM,KAAK4I,WAAW3I,cAAeL,KAGrDyF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACbgD,EACDnD,EAAAC,EAAAC,cAAA,aAGJF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,uDAKFH,EAAAC,EAAAC,cAAA,OAAKC,UAAWxF,KAAKgM,oBAAoBlE,EAAOE,OAC7CO,GACClD,EAAAC,EAAAC,cAACgD,EAAYoD,IAAb,CACEnK,OAAQ+G,EAAY/G,OACpB0B,SAAUqF,EAAYrF,SACtB6F,YAAaR,EAAYQ,cAG7B1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUzB,GAAG,aAC1BsB,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAK+L,WAAtB,eAIJ1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUzB,GAAG,cAC1BsB,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAK8J,YAAtB,uBArQUlE,IAAMC,WAApBqC,EASGpC,aAAe,CACpBgG,OAAO,EACPF,cAAe6B,UAiQJvF,QCvTMwF,6MACnB/H,QAAU,SAAA5B,GACJU,EAAKkJ,SAAS5J,KAChBU,EAAKC,MAAMkJ,MAAMC,UAAU9J,GAC3BU,EAAKC,MAAMoJ,OAAOC,cAItBJ,SAAW,SAAA5J,GACT,QAAKU,EAAKC,MAAMiJ,UACe,OAA3BlJ,EAAKC,MAAMsJ,EAAEC,MAAMlK,4EAIhB,IAAA6D,EAAA5H,KACHkO,EAAS,GACTlO,KAAK0E,MAAMyJ,IAAIC,WACjBF,OACqCtM,IAAnC5B,KAAK0E,MAAMyJ,IAAIC,SAASF,OACtB7I,EAAAC,EAAAC,cAAA,OAAKxB,GAAG,UAAR,WAA0B/D,KAAK0E,MAAMyJ,IAAIC,SAASF,QAElD7I,EAAAC,EAAAC,cAAA,OAAKxB,GAAG,UAAR,UAaN,IATA,IAAMsK,EAAY,CAChBC,OAAQ,iBACRC,MAAO,OACPC,OAAQ,OACRC,WAAY,OACZC,UAAW,UAGTC,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIX,EAAQ,GADcY,EAAA,SAEjBC,GACP,IAAM/K,EAAK,EAAI6K,EAAIE,EACnBb,EAAMc,KACJ1J,EAAAC,EAAAC,cAAA,MAAI8H,MAAOgB,EAAWrJ,IAAKjB,EAAI4B,QAAS,kBAAMiC,EAAKjC,QAAQ5B,KACxD6D,EAAKlD,MAAMsJ,EAAEC,MAAMlK,MAJjB+K,EAAI,EAAGA,EAAI,EAAGA,IAAKD,EAAnBC,GAQTH,EAAMI,KAAK1J,EAAAC,EAAAC,cAAA,MAAIP,IAAK4J,GAAIX,IAG1B,OACE5I,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOxB,GAAG,SACRsB,EAAAC,EAAAC,cAAA,aAAQoJ,IAETT,UApD0BtI,IAAMC,WCAnCmJ,EAAiB,SAACjM,EAASnD,GAAV,OACrBmD,EAAQoD,KAAK,SAAAlD,GAAM,OAAIA,EAAOR,OAAS7C,KACnCqP,EAAe,SAAAlM,GAAO,OAAIA,EAAQoD,KAAK,SAAAlD,GAAM,OAAKA,EAAOR,QA0DhDyM,6MAvDbC,gBAAkB,WAAM,IAAAxC,EACMlI,EAAKC,MAAzB0K,EADczC,EACdyC,OAAQrM,EADM4J,EACN5J,QAChB0B,EAAKC,MAAM2K,OAAOD,EAAQH,EAAalM,GAASgB,OAGlDuL,iBAAmB,WACjB7K,EAAKC,MAAM6K,QAAQ9K,EAAKC,MAAM0K,WAGhCI,gBAAkB,WAAM,IAAAC,EACkBhL,EAAKC,MAArC0K,EADcK,EACdL,OAAQrM,EADM0M,EACN1M,QAASnD,EADH6P,EACG7P,WACzB6E,EAAKC,MAAMgL,OACTN,EADF,GAAAlP,OAEK8O,EAAejM,EAASnD,GAAYmE,IACvChB,EAAQ5C,WAIZwP,oBAAsB,WAAM,IAAAC,EACEnL,EAAKC,MAAzB0K,EADkBQ,EAClBR,OAAQrM,EADU6M,EACV7M,QAChB0B,EAAKC,MAAMmL,WAAWT,EAAQrM,EAAQ5C,iFAG/B,IAAA2P,EAC2C9P,KAAK0E,MAA/ChE,EADDoP,EACCpP,SAAUd,EADXkQ,EACWlQ,WAAYmD,EADvB+M,EACuB/M,QAASqM,EADhCU,EACgCV,OACjClJ,EAAa8I,EAAejM,EAASnD,GACrCwG,EAAW6I,EAAalM,GAE9B,OACEsC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAM8H,MAAO,CAAE0C,aAAc,SAAWrP,GACvCqC,EAAQ0D,IAAI,SAAAxD,GAAM,OACjBoC,EAAAC,EAAAC,cAAA,QACEP,IAAG,QAAA9E,OAAUkP,EAAV,YAAAlP,OAA2B+C,EAAOc,IACrCsJ,MAAO,CAAEC,QAAS,SAEjBrK,EAAOR,KAAOQ,EAAOR,KAAO,UAIhCyD,GAAcb,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAKsP,kBAAtB,SACdlJ,IAAaF,GACZb,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAKmP,iBAAtB,SAEA/I,GAAYF,GACZb,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAKwP,iBAAtB,SAEApJ,IAAaF,GACbb,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAK2P,qBAAtB,oBAjDe9J,aCFnBmK,EAAiB,SAAAtL,GAAK,OAAIA,EAAM/E,eAAe,GAAG6C,KAAKC,MAkJ9CwN,cA/Ib,SAAAA,EAAYvL,GAAO,IAAAD,EAAA,OAAA3E,OAAAC,EAAA,EAAAD,CAAAE,KAAAiQ,IACjBxL,EAAA3E,OAAAqI,EAAA,EAAArI,CAAAE,KAAAF,OAAAsI,EAAA,EAAAtI,CAAAmQ,GAAA5H,KAAArI,KAAM0E,KAMRwL,uBAAyB,SAAAzQ,GAA2B,IAAd4B,EAAc5B,EAAxByF,OAAU7D,MACpCoD,EAAKW,SAAS,CAAE+K,mBAAoB9O,KARnBoD,EAWnB2L,iBAAmB,WAEjB3L,EAAKC,MAAM2L,aAAa5L,EAAKD,MAAM2L,qBAblB1L,EAgBnB6L,gBAAkB,WAChB7L,EAAKC,MAAM6L,eAjBM9L,EAoBnB+L,sBAAwB,WACtB/L,EAAKC,MAAM+L,aAAaT,EAAevL,EAAKC,OAAQ,IArBnCD,EAwBnBiM,oBAAsB,SAACC,EAAQC,GAC7BnM,EAAKC,MAAMmM,WAAWb,EAAevL,EAAKC,OAAQiM,EAAQC,IAzBzCnM,EA4BnBqM,qBAAuB,SAAAH,GACrBlM,EAAKC,MAAMqM,YAAYf,EAAevL,EAAKC,OAAQiM,IA7BlClM,EAgCnB+K,gBAAkB,SAACmB,EAAQC,EAAUzM,GACnCM,EAAKC,MAAMsM,YAAYhB,EAAevL,EAAKC,OAAQ,CACjDlD,OAAQmP,EACRzN,SAAU0N,EACVzM,gBApCeM,EAwCnBkL,oBAAsB,SAACgB,EAAQxM,GAC7BM,EAAKC,MAAMsM,YAAYhB,EAAevL,EAAKC,OAAQ,CACjDlD,OAAQmP,EACRxM,gBA3CeM,EA+CnBwM,oBAAsB,WACpBxM,EAAKC,MAAMwM,cA9CXzM,EAAKD,MAAQ,CACX2L,mBAAoBzL,EAAM9E,YAHX6E,wEAmDV,IAAAmD,EAAA5H,KACCmQ,EAAuBnQ,KAAKwE,MAA5B2L,mBADDxD,EASH3M,KAAK0E,MANP8D,EAHKmE,EAGLnE,SACAF,EAJKqE,EAILrE,MACA1I,EALK+M,EAKL/M,WACAK,EANK0M,EAML1M,cACAN,EAPKgN,EAOLhN,eACA4I,EARKoE,EAQLpE,YAEI7H,EAAWsP,EAAehQ,KAAK0E,OAErC,OAAI8D,EACKnD,EAAAC,EAAAC,cAAA,OAAK8H,MAAO,CAAE8D,MAAO,QAArB,UAAsC3I,GAG3CF,IAAUR,EAAOC,MAEjB1C,EAAAC,EAAAC,cAAA,8BAEEF,EAAAC,EAAAC,cAAA,SACElE,MAAO8O,EACPzK,SAAU1F,KAAKkQ,yBAEjB7K,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAKoQ,kBAAtB,UAKF9H,IAAUR,EAAOG,KAEjB5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBAAW3F,IAEbyF,EAAAC,EAAAC,cAAA,WAC6B,IAA1B5F,EAAeQ,QACdkF,EAAAC,EAAAC,cAAA,UACE8H,MAAO,CAAE8D,MAAO,OAChBxL,QAAS3F,KAAKwQ,uBAFhB,uBAIuB7Q,EAAe,GAAG6C,KAAKC,OAIlD4C,EAAAC,EAAAC,cAAA,WAC4B,IAAzBtF,EAAcE,OACbkF,EAAAC,EAAAC,cAAA,+BAEAtF,EAAcwG,IAAI,SAAAD,GAAY,OAC5BnB,EAAAC,EAAAC,cAAC6L,EAAD,CACEpM,IAAG,QAAA9E,OAAUsG,EAAahF,QAC1Bd,SAAUA,EACV0O,OAAQ5I,EAAahF,OACrBuB,QAASyD,EAAazD,QACtBnD,WAAYA,EACZyP,OAAQzH,EAAK8I,oBACbnB,QAAS3H,EAAKkJ,qBACdpB,OAAQ9H,EAAK4H,gBACbK,WAAYjI,EAAK+H,yBAKzBtK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAKsQ,iBAAtB,YAMJhI,IAAUR,EAAOE,KAEjB3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQI,QAAS3F,KAAKiR,qBAAtB,cAED1I,GACClD,EAAAC,EAAAC,cAACgD,EAAYoD,IAAb,CACEnK,OAAQ+G,EAAY/G,OACpB0B,SAAUqF,EAAYrF,SACtB6F,YAAaR,EAAYQ,eAO5B,2BA5IelD,aCC1BwL,OAAKjN,WAAaiN,OAAKhN,WAAa,EAEpC,IAuCeiN,EAvCH,kBACVjM,EAAAC,EAAAC,cAACgM,EAAD,CACE7F,WAAY8F,2CACZ3I,YAAa2I,2CACb7R,eAAgB,CAAC,CAAE6C,KAAM6O,OAAMxF,MAAO6B,IACtCd,SAAU,SAAAnN,GAAA,IACR+I,EADQ/I,EACR+I,SACA7I,EAFQF,EAERE,eACAM,EAHQR,EAGRQ,cACAqI,EAJQ7I,EAIR6I,MACA1I,EALQH,EAKRG,WACA2I,EANQ9I,EAMR8I,YACAuE,EAPQrN,EAORqN,iBACAC,EARQtN,EAQRsN,gBACAC,EATQvN,EASRuN,iBACAC,EAVQxN,EAURwN,eACAC,EAXQzN,EAWRyN,gBACAC,EAZQ1N,EAYR0N,eACAC,EAbQ3N,EAaR2N,gBAbQ,OAeR/H,EAAAC,EAAAC,cAACkM,EAAD,CACEjJ,SAAUA,EACV7I,eAAgBA,EAChBM,cAAeA,EACfqI,MAAOA,EACP1I,WAAYA,EACZ2I,YAAaA,EACb8H,aAAcvD,EACdyD,YAAaxD,EACb0D,aAAczD,EACd6D,WAAY5D,EACZ8D,YAAa7D,EACbgE,WAAY/D,EACZ6D,YAAa5D,QC9BDsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3M,EAAAC,EAAAC,cAAC0M,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e612cd5.chunk.js","sourcesContent":["/*\n * Copyright 2018 The boardgame.io Authors\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nclass _LobbyConnectionImpl {\n  constructor({ server, gameComponents, playerName, playerCredentials }) {\n    this.gameComponents = gameComponents;\n    this.playerName = playerName || \"Visitor\";\n    this.playerCredentials = playerCredentials;\n    this.server = server;\n    this.gameInstances = [];\n  }\n\n  _baseUrl() {\n    return `${this.server || \"\"}/games`;\n  }\n\n  async refresh() {\n    try {\n      this.gameInstances.length = 0;\n      const resp = await fetch(this._baseUrl());\n      if (resp.status !== 200) {\n        throw new Error(\"HTTP status \" + resp.status);\n      }\n      const json = await resp.json();\n      for (let gameName of json) {\n        if (!this._getGameComponents(gameName)) continue;\n        const gameResp = await fetch(this._baseUrl() + \"/\" + gameName);\n        const gameJson = await gameResp.json();\n        for (let inst of gameJson.gameInstances) {\n          inst.gameName = gameName;\n        }\n        this.gameInstances = this.gameInstances.concat(gameJson.gameInstances);\n      }\n    } catch (error) {\n      throw new Error(\"failed to retrieve list of games (\" + error + \")\");\n    }\n  }\n\n  _getGameInstance(gameID) {\n    for (let inst of this.gameInstances) {\n      if (inst[\"gameID\"] === gameID) return inst;\n    }\n  }\n\n  _getGameComponents(gameName) {\n    for (let comp of this.gameComponents) {\n      if (comp.game.name === gameName) return comp;\n    }\n  }\n\n  _findPlayer(playerName) {\n    for (let inst of this.gameInstances) {\n      if (inst.players.some(player => player.name === playerName)) return inst;\n    }\n  }\n\n  async join(gameName, gameID, playerID) {\n    try {\n      let inst = this._findPlayer(this.playerName);\n      if (inst) {\n        throw new Error(\"player has already joined \" + inst.gameID);\n      }\n      inst = this._getGameInstance(gameID);\n      if (!inst) {\n        throw new Error(\"game instance \" + gameID + \" not found\");\n      }\n      const resp = await fetch(\n        this._baseUrl() + \"/\" + gameName + \"/\" + gameID + \"/join\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            playerID: playerID,\n            playerName: this.playerName\n          }),\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n      if (resp.status !== 200) throw new Error(\"HTTP status \" + resp.status);\n      const json = await resp.json();\n      inst.players[Number.parseInt(playerID)].name = this.playerName;\n      this.playerCredentials = json.playerCredentials;\n    } catch (error) {\n      throw new Error(\"failed to join room \" + gameID + \" (\" + error + \")\");\n    }\n  }\n\n  async leave(gameName, gameID) {\n    try {\n      let inst = this._getGameInstance(gameID);\n      if (!inst) throw new Error(\"game instance not found\");\n      for (let player of inst.players) {\n        if (player.name === this.playerName) {\n          const resp = await fetch(\n            this._baseUrl() + \"/\" + gameName + \"/\" + gameID + \"/leave\",\n            {\n              method: \"POST\",\n              body: JSON.stringify({\n                playerID: player.id,\n                playerCredentials: this.playerCredentials\n              }),\n              headers: { \"Content-Type\": \"application/json\" }\n            }\n          );\n          if (resp.status !== 200) {\n            throw new Error(\"HTTP status \" + resp.status);\n          }\n          delete player.name;\n          delete this.playerCredentials;\n          return;\n        }\n      }\n      throw new Error(\"player not found in room\");\n    } catch (error) {\n      throw new Error(\"failed to leave room \" + gameID + \" (\" + error + \")\");\n    }\n  }\n\n  async disconnect() {\n    let inst = this._findPlayer(this.playerName);\n    if (inst) {\n      await this.leave(inst.gameName, inst.gameID);\n    }\n    this.gameInstances = [];\n    this.playerName = \"Visitor\";\n  }\n\n  async create(gameName, numPlayers) {\n    try {\n      const comp = this._getGameComponents(gameName);\n      if (!comp) throw new Error(\"game not found\");\n      if (\n        numPlayers < comp.game.minPlayers ||\n        numPlayers > comp.game.maxPlayers\n      )\n        throw new Error(\"invalid number of players \" + numPlayers);\n      const resp = await fetch(this._baseUrl() + \"/\" + gameName + \"/create\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          numPlayers: numPlayers\n        }),\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n      if (resp.status !== 200) throw new Error(\"HTTP status \" + resp.status);\n    } catch (error) {\n      throw new Error(\n        \"failed to create room for \" + gameName + \" (\" + error + \")\"\n      );\n    }\n  }\n}\n\n/**\n * LobbyConnection\n *\n * Lobby model.\n *\n * @param {string}   server - '<host>:<port>' of the server.\n * @param {Array}    gameComponents - A map of Board and Game objects for the supported games.\n * @param {string}   playerName - The name of the player.\n * @param {string}   playerCredentials - The credentials currently used by the player, if any.\n *\n * Returns:\n *   A JS object that synchronizes the list of running game instances with the server and provides an API to create/join/start instances.\n */\nexport function LobbyConnection(opts) {\n  return new _LobbyConnectionImpl(opts);\n}\n","/*\n * Copyright 2018 The boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass LobbyLoginForm extends React.Component {\n  static propTypes = {\n    playerName: PropTypes.string,\n    onEnter: PropTypes.func.isRequired\n  };\n  static defaultProps = {\n    playerName: \"\"\n  };\n\n  state = {\n    playerName: this.props.playerName,\n    nameErrorMsg: \"\"\n  };\n\n  render() {\n    return (\n      <div>\n        <p className=\"phase-title\">Choose a player name:</p>\n        <input\n          type=\"text\"\n          value={this.state.playerName}\n          onChange={this.onChangePlayerName}\n          onKeyPress={this.onKeyPress}\n        />\n        <span className=\"buttons\">\n          <button className=\"buttons\" onClick={this.onClickEnter}>\n            Enter\n          </button>\n        </span>\n        <br />\n        <span className=\"error-msg\">\n          {this.state.nameErrorMsg}\n          <br />\n        </span>\n      </div>\n    );\n  }\n\n  onClickEnter = () => {\n    if (this.state.playerName === \"\") return;\n    this.props.onEnter(this.state.playerName);\n  };\n\n  onKeyPress = event => {\n    if (event.key === \"Enter\") {\n      this.onClickEnter();\n    }\n  };\n\n  onChangePlayerName = event => {\n    const name = event.target.value.trim();\n    this.setState({\n      playerName: name,\n      nameErrorMsg: name.length > 0 ? \"\" : \"empty player name\"\n    });\n  };\n}\n\nexport default LobbyLoginForm;\n","/*\n * Copyright 2018 The boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass LobbyRoomInstance extends React.Component {\n  static propTypes = {\n    gameInstance: PropTypes.shape({\n      gameName: PropTypes.string.isRequired,\n      gameID: PropTypes.string.isRequired,\n      players: PropTypes.array.isRequired\n    }),\n    playerName: PropTypes.string.isRequired,\n    onClickJoin: PropTypes.func.isRequired,\n    onClickLeave: PropTypes.func.isRequired,\n    onClickPlay: PropTypes.func.isRequired\n  };\n\n  _createSeat = player => {\n    return player.name || \"[free]\";\n  };\n\n  _createInstanceButtons = inst => {\n    const playerSeat = inst.players.find(\n      player => player.name === this.props.playerName\n    );\n    const freeSeat = inst.players.find(player => !player.name);\n    if (playerSeat && freeSeat) {\n      // already seated: waiting for game to start\n      return (\n        <button\n          onClick={() => this.props.onClickLeave(inst.gameName, inst.gameID)}\n        >\n          Leave\n        </button>\n      );\n    }\n    if (freeSeat) {\n      // at least 1 seat is available\n      return (\n        <button\n          onClick={() =>\n            this.props.onClickJoin(inst.gameName, inst.gameID, \"\" + freeSeat.id)\n          }\n        >\n          Join\n        </button>\n      );\n    }\n    // room is full\n    if (playerSeat) {\n      return (\n        <button\n          onClick={() =>\n            this.props.onClickPlay(inst.gameName, {\n              gameID: inst.gameID,\n              playerID: \"\" + playerSeat.id,\n              numPlayers: inst.players.length\n            })\n          }\n        >\n          Play\n        </button>\n      );\n    }\n    // allow spectating\n    return (\n      <button\n        onClick={() =>\n          this.props.onClickPlay(inst.gameName, {\n            gameID: inst.gameID,\n            numPlayers: inst.players.length\n          })\n        }\n      >\n        Spectate\n      </button>\n    );\n  };\n\n  render() {\n    const inst = this.props.gameInstance;\n    let status = \"OPEN\";\n    if (!inst.players.find(player => !player.name)) {\n      status = \"RUNNING\";\n    }\n    return (\n      <tr key={\"line-\" + inst.gameID}>\n        <td key={\"cell-name-\" + inst.gameID}>{inst.gameName}</td>\n        <td key={\"cell-status-\" + inst.gameID}>{status}</td>\n        <td key={\"cell-seats-\" + inst.gameID}>\n          {inst.players.map(this._createSeat).join(\", \")}\n        </td>\n        <td key={\"cell-buttons-\" + inst.gameID}>\n          {/* TODO show leave button even if game is ready to play */}\n          {this._createInstanceButtons(inst)}\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default LobbyRoomInstance;\n","/*\n * Copyright 2018 The boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass LobbyCreateRoomForm extends React.Component {\n  static propTypes = {\n    games: PropTypes.array.isRequired,\n    createGame: PropTypes.func.isRequired\n  };\n\n  state = {\n    selectedGame: 0,\n    numPlayers: 2\n  };\n\n  _createGameNameOption = (game, idx) => {\n    return (\n      <option key={\"name-option-\" + idx} value={idx}>\n        {game.game.name}\n      </option>\n    );\n  };\n\n  _createNumPlayersOption = idx => {\n    return (\n      <option key={\"num-option-\" + idx} value={idx}>\n        {idx}\n      </option>\n    );\n  };\n\n  _createNumPlayersRange = game => {\n    if (!game.minPlayers) {\n      game.minPlayers = 1;\n    }\n    if (!game.maxPlayers) {\n      game.maxPlayers = 4;\n    }\n    console.assert(game.maxPlayers >= game.minPlayers);\n    return [...new Array(game.maxPlayers + 1).keys()].slice(game.minPlayers);\n  };\n\n  render() {\n    return (\n      <div>\n        <select\n          value={this.state.selectedGame}\n          onChange={evt => this.onChangeSelectedGame(evt)}\n        >\n          {this.props.games.map(this._createGameNameOption)}\n        </select>\n        <span>Players:</span>\n        <select\n          value={this.state.numPlayers}\n          onChange={this.onChangeNumPlayers}\n        >\n          {this._createNumPlayersRange(\n            this.props.games[this.state.selectedGame].game\n          ).map(this._createNumPlayersOption)}\n        </select>\n        <span className=\"buttons\">\n          <button onClick={this.onClickCreate}>Create</button>\n        </span>\n      </div>\n    );\n  }\n\n  onChangeNumPlayers = event => {\n    this.setState({\n      numPlayers: Number.parseInt(event.target.value)\n    });\n  };\n\n  onChangeSelectedGame = event => {\n    let idx = Number.parseInt(event.target.value);\n    this.setState({\n      selectedGame: idx,\n      numPlayers: this._createNumPlayersRange(this.props.games[idx].game)[0]\n    });\n  };\n\n  onClickCreate = () => {\n    this.props.createGame(\n      this.props.games[this.state.selectedGame].game.name,\n      this.state.numPlayers\n    );\n  };\n}\n\nexport default LobbyCreateRoomForm;\n","/*\n * Copyright 2018 The boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nimport React from \"react\";\nimport Cookies from \"react-cookies\";\nimport PropTypes from \"prop-types\";\nimport { Client } from \"boardgame.io/react\";\nimport { LobbyConnection } from \"./connection\";\nimport LobbyLoginForm from \"./login-form\";\nimport LobbyRoomInstance from \"./room-instance\";\nimport LobbyCreateRoomForm from \"./create-room-form\";\n\nexport const PHASES = {\n  ENTER: \"enter\",\n  PLAY: \"play\",\n  LIST: \"list\"\n};\n\n/**\n * Lobby\n *\n * React lobby component.\n *\n * @param {Array}  gameComponents - An array of Board and Game objects for the supported games.\n * @param {string} lobbyServer - Address of the lobby server (for example 'localhost:8000').\n *                               If not set, defaults to the server that served the page.\n * @param {string} gameServer - Address of the game server (for example 'localhost:8001').\n *                              If not set, defaults to the server that served the page.\n * @param {function} clientFactory - Function that is used to create the game clients.\n * @param {bool}   debug - Enable debug information (default: false).\n *\n * Returns:\n *   A React component that provides a UI to create, list, join, leave, play or spectate game instances.\n */\n\n// TODO add option to long-polling like <Lobby polling={{ period: 5000 }} ... />\n// TODO add option to automatically remove room if all users leave the room\n// TODO add optional unique name check\n// TODO add optional limit for rooms (will disable 'create room' button if rooms number reached limit)\n// TODO rename gameInstances to rooms cause it's easier to understand\nclass Lobby extends React.Component {\n  static propTypes = {\n    gameComponents: PropTypes.array.isRequired,\n    lobbyServer: PropTypes.string,\n    gameServer: PropTypes.string,\n    debug: PropTypes.bool,\n    clientFactory: PropTypes.func\n  };\n\n  static defaultProps = {\n    debug: false,\n    clientFactory: Client\n  };\n\n  state = {\n    phase: PHASES.ENTER,\n    playerName: \"Visitor\",\n    runningGame: null,\n    errorMsg: \"\",\n    credentialStore: {}\n  };\n\n  constructor(props) {\n    super(props);\n    this._createConnection(this.props);\n    this._updateConnection();\n  }\n\n  componentDidMount() {\n    let cookie = Cookies.load(\"lobbyState\") || {};\n    if (cookie.phase && cookie.phase === PHASES.PLAY) {\n      cookie.phase = PHASES.LIST;\n    }\n    this.setState({\n      phase: cookie.phase || PHASES.ENTER,\n      playerName: cookie.playerName || \"Visitor\",\n      credentialStore: cookie.credentialStore || {}\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let name = this.state.playerName;\n    let creds = this.state.credentialStore[name];\n    if (\n      prevState.phase !== this.state.phase ||\n      prevState.credentialStore[name] !== creds ||\n      prevState.playerName !== name\n    ) {\n      this._createConnection(this.props);\n      this._updateConnection();\n      let cookie = {\n        phase: this.state.phase,\n        playerName: name,\n        credentialStore: this.state.credentialStore\n      };\n      Cookies.save(\"lobbyState\", cookie, { path: \"/\" });\n    }\n  }\n\n  _createConnection = props => {\n    const name = this.state.playerName;\n    this.connection = LobbyConnection({\n      server: props.lobbyServer,\n      gameComponents: props.gameComponents,\n      playerName: name,\n      playerCredentials: this.state.credentialStore[name]\n    });\n  };\n\n  _updateCredentials = (playerName, credentials) => {\n    this.setState(prevState => {\n      // clone store or componentDidUpdate will not be triggered\n      const store = Object.assign({}, prevState.credentialStore);\n      store[[playerName]] = credentials;\n      return { credentialStore: store };\n    });\n  };\n\n  _updateConnection = async () => {\n    await this.connection.refresh();\n    this.forceUpdate();\n  };\n\n  _enterLobby = playerName => {\n    this.setState({ playerName, phase: PHASES.LIST });\n  };\n\n  _exitLobby = async () => {\n    await this.connection.disconnect();\n    this.setState({ phase: PHASES.ENTER, errorMsg: \"\" });\n  };\n\n  _createRoom = async (gameName, numPlayers) => {\n    try {\n      await this.connection.create(gameName, numPlayers);\n      await this.connection.refresh();\n      // rerender\n      this.setState({});\n    } catch (error) {\n      this.setState({ errorMsg: error.message });\n    }\n  };\n\n  _joinRoom = async (gameName, gameID, playerID) => {\n    try {\n      await this.connection.join(gameName, gameID, playerID);\n      await this.connection.refresh();\n      this._updateCredentials(\n        this.connection.playerName,\n        this.connection.playerCredentials\n      );\n    } catch (error) {\n      this.setState({ errorMsg: error.message });\n    }\n  };\n\n  _leaveRoom = async (gameName, gameID) => {\n    try {\n      await this.connection.leave(gameName, gameID);\n      await this.connection.refresh();\n      this._updateCredentials(\n        this.connection.playerName,\n        this.connection.playerCredentials\n      );\n    } catch (error) {\n      this.setState({ errorMsg: error.message });\n    }\n  };\n\n  _startGame = (gameName, gameOpts) => {\n    const gameCode = this.connection._getGameComponents(gameName);\n    if (!gameCode) {\n      this.setState({\n        errorMsg: \"game \" + gameName + \" not supported\"\n      });\n      return;\n    }\n\n    let multiplayer = null;\n    if (gameOpts.numPlayers > 1) {\n      if (this.props.gameServer) {\n        multiplayer = { server: this.props.gameServer };\n      } else {\n        multiplayer = true;\n      }\n    }\n\n    const app = this.props.clientFactory({\n      game: gameCode.game,\n      board: gameCode.board,\n      debug: this.props.debug,\n      multiplayer\n    });\n\n    const game = {\n      app: app,\n      gameID: gameOpts.gameID,\n      playerID: gameOpts.numPlayers > 1 ? gameOpts.playerID : null,\n      credentials: this.connection.playerCredentials\n    };\n\n    this.setState({ phase: PHASES.PLAY, runningGame: game });\n  };\n\n  _exitRoom = () => {\n    this.setState({ phase: PHASES.LIST, runningGame: null });\n  };\n\n  _getPhaseVisibility = phase => {\n    return this.state.phase !== phase ? \"hidden\" : \"phase\";\n  };\n\n  renderRooms = (gameInstances, playerName) => {\n    return gameInstances.map(gameInstance => {\n      const { gameID, gameName, players } = gameInstance;\n      return (\n        <LobbyRoomInstance\n          key={\"instance-\" + gameID}\n          gameInstance={{ gameID, gameName, players: Object.values(players) }}\n          playerName={playerName}\n          onClickJoin={this._joinRoom}\n          onClickLeave={this._leaveRoom}\n          onClickPlay={this._startGame}\n        />\n      );\n    });\n  };\n\n  render() {\n    const { gameComponents, renderer } = this.props;\n    const { errorMsg, playerName, phase, runningGame } = this.state;\n\n    if (renderer) {\n      return renderer({\n        errorMsg,\n        gameComponents,\n        gameInstances: this.connection.gameInstances,\n        phase,\n        playerName,\n        runningGame,\n        handleEnterLobby: this._enterLobby,\n        handleExitLobby: this._exitLobby,\n        handleCreateRoom: this._createRoom,\n        handleJoinRoom: this._joinRoom,\n        handleLeaveRoom: this._leaveRoom,\n        handleExitRoom: this._exitRoom,\n        handleStartGame: this._startGame\n      });\n    }\n\n    return (\n      <div id=\"lobby-view\" style={{ padding: 50 }}>\n        <div className={this._getPhaseVisibility(PHASES.ENTER)}>\n          <LobbyLoginForm\n            key={playerName}\n            playerName={playerName}\n            onEnter={this._enterLobby}\n          />\n        </div>\n\n        <div className={this._getPhaseVisibility(PHASES.LIST)}>\n          <p>Welcome, {playerName}</p>\n\n          <div className=\"phase-title\" id=\"game-creation\">\n            <span>Create a room:</span>\n            <LobbyCreateRoomForm\n              games={gameComponents}\n              createGame={this._createRoom}\n            />\n          </div>\n          <p className=\"phase-title\">Join a room:</p>\n          <div id=\"instances\">\n            <table>\n              <tbody>\n                {this.renderRooms(this.connection.gameInstances, playerName)}\n              </tbody>\n            </table>\n            <span className=\"error-msg\">\n              {errorMsg}\n              <br />\n            </span>\n          </div>\n          <p className=\"phase-title\">\n            Rooms that become empty are automatically deleted.\n          </p>\n        </div>\n\n        <div className={this._getPhaseVisibility(PHASES.PLAY)}>\n          {runningGame && (\n            <runningGame.app\n              gameID={runningGame.gameID}\n              playerID={runningGame.playerID}\n              credentials={runningGame.credentials}\n            />\n          )}\n          <div className=\"buttons\" id=\"game-exit\">\n            <button onClick={this._exitRoom}>Exit game</button>\n          </div>\n        </div>\n\n        <div className=\"buttons\" id=\"lobby-exit\">\n          <button onClick={this._exitLobby}>Exit lobby</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Lobby;\n","import React from \"react\";\n\nexport default class Board extends React.Component {\n  onClick = id => {\n    if (this.isActive(id)) {\n      this.props.moves.clickCell(id);\n      this.props.events.endTurn();\n    }\n  };\n\n  isActive = id => {\n    if (!this.props.isActive) return false;\n    if (this.props.G.cells[id] !== null) return false;\n    return true;\n  };\n\n  render() {\n    let winner = \"\";\n    if (this.props.ctx.gameover) {\n      winner =\n        this.props.ctx.gameover.winner !== undefined ? (\n          <div id=\"winner\">Winner: {this.props.ctx.gameover.winner}</div>\n        ) : (\n          <div id=\"winner\">Draw!</div>\n        );\n    }\n\n    const cellStyle = {\n      border: \"1px solid #555\",\n      width: \"50px\",\n      height: \"50px\",\n      lineHeight: \"50px\",\n      textAlign: \"center\"\n    };\n\n    let tbody = [];\n    for (let i = 0; i < 3; i++) {\n      let cells = [];\n      for (let j = 0; j < 3; j++) {\n        const id = 3 * i + j;\n        cells.push(\n          <td style={cellStyle} key={id} onClick={() => this.onClick(id)}>\n            {this.props.G.cells[id]}\n          </td>\n        );\n      }\n      tbody.push(<tr key={i}>{cells}</tr>);\n    }\n\n    return (\n      <div>\n        <table id=\"board\">\n          <tbody>{tbody}</tbody>\n        </table>\n        {winner}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nconst findPlayerSeat = (players, playerName) =>\n  players.find(player => player.name === playerName);\nconst findFreeSeat = players => players.find(player => !player.name);\n\nclass StyledRoom extends Component {\n  handleJoinClick = () => {\n    const { roomId, players } = this.props;\n    this.props.onJoin(roomId, findFreeSeat(players).id);\n  };\n\n  handleLeaveClick = () => {\n    this.props.onLeave(this.props.roomId);\n  };\n\n  handlePlayClick = () => {\n    const { roomId, players, playerName } = this.props;\n    this.props.onPlay(\n      roomId,\n      `${findPlayerSeat(players, playerName).id}`,\n      players.length\n    );\n  };\n\n  handleSpectateClick = () => {\n    const { roomId, players } = this.props;\n    this.props.onSpectate(roomId, players.length);\n  };\n\n  render() {\n    const { gameName, playerName, players, roomId } = this.props;\n    const playerSeat = findPlayerSeat(players, playerName);\n    const freeSeat = findFreeSeat(players);\n\n    return (\n      <div>\n        <span style={{ paddingRight: \"30px\" }}>{gameName}</span>\n        {players.map(player => (\n          <span\n            key={`game-${roomId}-player-${player.id}`}\n            style={{ padding: \"10px\" }}\n          >\n            {player.name ? player.name : \"free\"}\n          </span>\n        ))}\n\n        {playerSeat && <button onClick={this.handleLeaveClick}>Leave</button>}\n        {freeSeat && !playerSeat && (\n          <button onClick={this.handleJoinClick}>Join</button>\n        )}\n        {!freeSeat && playerSeat && (\n          <button onClick={this.handlePlayClick}>Play</button>\n        )}\n        {!freeSeat && !playerSeat && (\n          <button onClick={this.handleSpectateClick}>Spectate</button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default StyledRoom;\n","import React, { Component } from \"react\";\nimport { PHASES } from \"./libs/boardgame.io/react\";\nimport StyledRoom from \"./StyledRoom\";\n\nconst selectGameName = props => props.gameComponents[0].game.name;\n\nclass StyledLobby extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      changingPlayerName: props.playerName\n    };\n  }\n\n  handlePlayerNameChange = ({ target: { value } }) => {\n    this.setState({ changingPlayerName: value });\n  };\n\n  handleEnterClick = () => {\n    // TODO check if name is not already taken\n    this.props.onEnterLobby(this.state.changingPlayerName);\n  };\n\n  handleExitClick = () => {\n    this.props.onExitLobby();\n  };\n\n  handleCreateRoomClick = () => {\n    this.props.onCreateRoom(selectGameName(this.props), 2);\n  };\n\n  handleJoinRoomClick = (gameId, playerId) => {\n    this.props.onJoinRoom(selectGameName(this.props), gameId, playerId);\n  };\n\n  handleLeaveRoomClick = gameId => {\n    this.props.onLeaveRoom(selectGameName(this.props), gameId);\n  };\n\n  handlePlayClick = (gameId, playerId, numPlayers) => {\n    this.props.onStartGame(selectGameName(this.props), {\n      gameID: gameId,\n      playerID: playerId,\n      numPlayers\n    });\n  };\n\n  handleSpectateClick = (gameId, numPlayers) => {\n    this.props.onStartGame(selectGameName(this.props), {\n      gameID: gameId,\n      numPlayers\n    });\n  };\n\n  handleExitRoomClick = () => {\n    this.props.onExitRoom();\n  };\n\n  render() {\n    const { changingPlayerName } = this.state;\n    const {\n      errorMsg,\n      phase,\n      playerName,\n      gameInstances,\n      gameComponents,\n      runningGame\n    } = this.props;\n    const gameName = selectGameName(this.props);\n\n    if (errorMsg) {\n      return <div style={{ color: \"red\" }}>Error: {errorMsg}</div>;\n    }\n\n    if (phase === PHASES.ENTER) {\n      return (\n        <div>\n          Enter your name:\n          <input\n            value={changingPlayerName}\n            onChange={this.handlePlayerNameChange}\n          />\n          <button onClick={this.handleEnterClick}>Login</button>\n        </div>\n      );\n    }\n\n    if (phase === PHASES.LIST) {\n      return (\n        <div>\n          <div>\n            <b>Hello, {playerName}</b>\n          </div>\n          <div>\n            {gameComponents.length === 1 && (\n              <button\n                style={{ color: \"red\" }}\n                onClick={this.handleCreateRoomClick}\n              >\n                Create new room for {gameComponents[0].game.name}\n              </button>\n            )}\n          </div>\n          <div>\n            {gameInstances.length === 0 ? (\n              <i>There are no rooms</i>\n            ) : (\n              gameInstances.map(gameInstance => (\n                <StyledRoom\n                  key={`game-${gameInstance.gameID}`}\n                  gameName={gameName}\n                  roomId={gameInstance.gameID}\n                  players={gameInstance.players}\n                  playerName={playerName}\n                  onJoin={this.handleJoinRoomClick}\n                  onLeave={this.handleLeaveRoomClick}\n                  onPlay={this.handlePlayClick}\n                  onSpectate={this.handleSpectateClick}\n                />\n              ))\n            )}\n          </div>\n          <div>\n            <button onClick={this.handleExitClick}>Logout</button>\n          </div>\n        </div>\n      );\n    }\n\n    if (phase === PHASES.PLAY) {\n      return (\n        <div>\n          <div>\n            <button onClick={this.handleExitRoomClick}>Exit game</button>\n          </div>\n          {runningGame && (\n            <runningGame.app\n              gameID={runningGame.gameID}\n              playerID={runningGame.playerID}\n              credentials={runningGame.credentials}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return \"Internal error...\";\n  }\n}\n\nexport default StyledLobby;\n","import React from \"react\";\nimport { Game } from \"tic-tac-toe-core\";\nimport Lobby from \"./libs/boardgame.io/react\";\n\nimport Board from \"./Board\";\nimport StyledLobby from \"./StyledLobby\";\n\nGame.minPlayers = Game.maxPlayers = 2;\n\nconst App = () => (\n  <Lobby\n    gameServer={process.env.REACT_APP_API_URL}\n    lobbyServer={process.env.REACT_APP_API_URL}\n    gameComponents={[{ game: Game, board: Board }]}\n    renderer={({\n      errorMsg,\n      gameComponents,\n      gameInstances,\n      phase,\n      playerName,\n      runningGame,\n      handleEnterLobby,\n      handleExitLobby,\n      handleCreateRoom,\n      handleJoinRoom,\n      handleLeaveRoom,\n      handleExitRoom,\n      handleStartGame\n    }) => (\n      <StyledLobby\n        errorMsg={errorMsg}\n        gameComponents={gameComponents}\n        gameInstances={gameInstances}\n        phase={phase}\n        playerName={playerName}\n        runningGame={runningGame}\n        onEnterLobby={handleEnterLobby}\n        onExitLobby={handleExitLobby}\n        onCreateRoom={handleCreateRoom}\n        onJoinRoom={handleJoinRoom}\n        onLeaveRoom={handleLeaveRoom}\n        onExitRoom={handleExitRoom}\n        onStartGame={handleStartGame}\n      />\n    )}\n  />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}